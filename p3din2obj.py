import struct

def main():
    print 'started'
    data = open('test.bin', 'rb').read()
    cursor = 0
    # start parsing
    header = struct.unpack('12sxxxxxxxxIIIIIIIIIII', data[cursor:0x40])
    cursor += 0x40
    # basic counts
    vertex_count = header[1]
    normal_count = header[2]
    uv_count = header[3]
    # tri face counts
    tri_faces_p = header[4]
    tri_faces_pn = header[5]
    tri_faces_pu = header[6]
    tri_faces_pun = header[7]
    # quad face counts
    quad_faces_p = header[8]
    quad_faces_pn = header[9]
    quad_faces_pu = header[10]
    quad_faces_pun = header[11]
    # print debug data
    print 'version %s' % header[0]
    print '%s vertices' % vertex_count
    print '%s normals' % normal_count
    print '%s uvs' % uv_count
    print '%s total tris' % (tri_faces_p + tri_faces_pn + tri_faces_pu + tri_faces_pun)
    print '%s total quads' % (quad_faces_p + quad_faces_pn + quad_faces_pu + quad_faces_pun)
    print 'parsed header'
    # parse vertices
    vertices = []
    for i in range(vertex_count):
        vertex = struct.unpack('fff', data[cursor:cursor + 4 * 3])
        cursor += 4 * 3
        vertices.append(vertex)
    print 'successfully parsed %s vertices' % len(vertices)
    # parse normals
    normals = []
    for i in range(normal_count):
        vertex = struct.unpack('fff', data[cursor:cursor + 4 * 3])
        cursor += 4 * 3
        normals.append(vertex)
    print 'successfully parsed %s normals' % len(normals)
    # parse uvs
    uvs = []
    for i in range(uv_count):
        vertex = struct.unpack('ff', data[cursor:cursor + 4 * 2])
        cursor += 4 * 2
        uvs.append(vertex)
    print 'successfully parsed %s uvs' % len(uvs)
    # parse tri faces
    tri_faces = []
    # (unfinished)
    if tri_faces_p > 0 or quad_faces_p > 0:
        raise Exception('not implemented') 
    if tri_faces_pn > 0 or quad_faces_pn > 0:
        raise Exception('not implemented')
    if tri_faces_pu > 0 or quad_faces_pu > 0:
        print 'parsing pu type faces'
        for i in range(tri_faces_pu):
            tri_faces.append([])
            tri_faces[i].append(struct.unpack('III', data[cursor:cursor + 4 * 3]))
            cursor += 4 * 3
        for i in range(tri_faces_pu):
            tri_faces[i].append(struct.unpack('III', data[cursor:cursor + 4 * 3]))
            cursor += 4 * 3
        for i in range(tri_faces_pu):
            # empty normal
            tri_faces[i].append(())
        # skip materials
        cursor += tri_faces_pu * 6 * 4
            
    if tri_faces_pun > 0 or quad_faces_pun > 0:
        raise Exception('not implemented')

    print 'finished parsing, starting .obj generation'
    obj = open('test.obj', 'w')
    obj.write('# generated by p3din2obj\n')
    obj.close()


if __name__ == '__main__':
    main()
